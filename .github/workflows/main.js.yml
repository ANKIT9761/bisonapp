name: CI

on: [push]

jobs:
  ###############
  # Lint
  ###############
  linters:
    name: Linters
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Node
      - name: Setup Node
        uses: actions/setup-node@v2.1.1
        with:
          node-version: 14.6.0

      # Yarn cache/install
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: JS package cache
        uses: actions/cache@v2.1.0
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: |
          yarn install --pure-lockfile --frozen-lockfile --ignore-optional

      # Build to ensure we generate proper typescript types
      - run: yarn nexus build

      # Lint Code
      - name: ESLint
        run: yarn lint

      # TypeScript compile check
      - name: TS Compile
        run: yarn tsc

  ###############
  # Test
  ###############
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: linters
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: myapp_test
    services:
      postgres:
        image: postgres:11.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: myapp_test
        ports: ['5432:5432']
        # Make sure the database is ready before we use it
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Node
      - name: Setup Node
        uses: actions/setup-node@v2.1.1
        with:
          node-version: 14.6.0

      # Yarn cache/install
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: JS package cache
        uses: actions/cache@v2.1.0
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: |
          yarn install --pure-lockfile

      # Setup & configure database
      - name: Setup test database
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost/myapp_test
        run: |
          yarn db:migrate

      # Build app and generate types
      - name: Build App
        run: yarn build

      # Jest Tests (API/Frontend)
      - name: Run Jest Tests (API & Frontend)
        run: yarn test:ci

      # E2E Tests via Cypress
      - name: Run Cypress E2E Tests
        uses: cypress-io/github-action@v2
        with:
          # build: yarn build
          start: yarn test:server
          wait-on: 'http://localhost:3001'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DATABASE_URL: postgresql://postgres:postgres@localhost/myapp_test

      - name: Upload Cypress Screenshots
        uses: actions/upload-artifact@v1
        # Only capture images on failure
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Upload Cypress Videos
        uses: actions/upload-artifact@v1
        # Test run video was always captured, so this action uses "always()" condition
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     container:
#       image: cypress/base:14.0.0

#     steps:
#       - uses: actions/checkout@v2

#       # Install dependencies
#       - run: yarn install --frozen-lockfile --ignore-optional
#       - run: yarn build

#       # Jest Tests (API/Frontend)
#       - name: Run Jest Tests (API & Frontend)
#         run: yarn test:ci

#       # E2E Tests via Cypress
#       - name: Run Cypress E2E Tests
#         uses: cypress-io/github-action@v1.16.1
#         with:
# #           build: yarn build
#           start: yarn test:server
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Upload Cypress Screenshots
#         uses: actions/upload-artifact@v1
#         # Only capture images on failure
#         if: failure()
#         with:
#           name: cypress-screenshots
#           path: cypress/screenshots
#       - name: Upload Cypress Videos
#         uses: actions/upload-artifact@v1
#         # Test run video was always captured, so this action uses "always()" condition
#         if: always()
#         with:
#           name: cypress-videos
#           path: cypress/videos
